#version 430 core
layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct SpatialIndex {
    uint index;
    uint hash;
    uint key;
};

layout(std430, binding = 0) buffer _Entries {
    SpatialIndex Entries[];
};

layout(std140, binding = 0) uniform Settings {
    uint num_entries;
    uint group_width;
    uint group_height;
    uint step_index;
};

// Sort the given entries by their keys (smallest to largest)
// This is done using bitonic merge sort, and takes multiple iterations
void main()
{
    uvec3 id = gl_GlobalInvocationID;
	uint i = id.x;

	uint hIndex = i & (group_width - 1);
	uint indexLeft = hIndex + (group_height + 1) * (i / group_width);
	uint rightStepSize = step_index == 0 ? group_height - 2 * hIndex : (group_height + 1) / 2;
	uint indexRight = indexLeft + rightStepSize;

	// Exit if out of bounds (for non-power of 2 input sizes)
	if (indexRight >= num_entries) return;

	uint valueLeft = Entries[indexLeft].key;
	uint valueRight = Entries[indexRight].key;

	// Swap entries if value is descending
	if (valueLeft > valueRight)
	{
		SpatialIndex temp = Entries[indexLeft];
		Entries[indexLeft] = Entries[indexRight];
		Entries[indexRight] = temp;
	}
}
