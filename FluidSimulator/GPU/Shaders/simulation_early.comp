#version 430 core
layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) uniform Settings {
    uint num_particles;
    float gravity;
    float delta_time;
    float collision_damping;
    float smoothing_radius;
    float target_density;
    float pressure_multiplier;
    float near_pressure_multiplier;
    float viscosity_strength;
    float poly6_scaling_factor;
    float spiky_pow3_scaling_factor;
    float spiky_pow2_scaling_factor;
    float spiky_pow3_derivative_scaling_factor;
    float spiky_pow2_derivative_scaling_factor;
    vec2 interaction_input_point;
    float interaction_input_strength;
    float interaction_input_radius;
    //vec2 obstacle_size;
    //vec2 obstacle_centre;
};

layout(std430, binding = 0) buffer _Positions
{
    vec2 Positions[];
};

layout(std430, binding = 1) buffer _Velocities
{
    vec2 Velocities[];
};

layout(std430, binding = 2) buffer _PredictedPositions
{
    vec2 PredictedPositions[];
};

layout(std430, binding = 3) writeonly buffer _SpatialOffsets
{
    uint SpatialOffsets[];
};

struct SpatialIndex {
    uint index;
    uint hash;
    uint key;
};

uniform float aspect_ratio;

layout(std430, binding = 4) writeonly buffer _SpatialIndices
{
    SpatialIndex SpatialIndices[];
};

vec2 CalculateExternalForces(vec2 pos, vec2 velocity)
{
	// Gravity
    vec2 gravity_accel = vec2(0, gravity);

    // Input interactions modify gravity
    if (interaction_input_strength != 0) {
        vec2 input_point_offset = interaction_input_point - pos;
        float sqr_dst = dot(input_point_offset, input_point_offset);
        if (sqr_dst < interaction_input_radius * interaction_input_radius)
        {
            float dst = sqrt(sqr_dst);
            float edge_t = (dst / interaction_input_radius);
            float centre_t = 1 - edge_t;
            vec2 dir_to_centre = input_point_offset / dst;

            float gravity_weight = 1 - (centre_t * clamp(interaction_input_strength / 10000, 0.0, 1.0));
            vec2 accel = gravity_accel * gravity_weight + dir_to_centre * centre_t * interaction_input_strength;
            accel -= velocity * centre_t;
            return accel;
        }
    }

    return gravity_accel;
}

// Constants used for hashing
const uint hashK1 = 15823;
const uint hashK2 = 9737333;

// Convert floating point position into an integer cell coordinate
ivec2 GetCell2D(vec2 position, float radius)
{
	return ivec2(floor(position / radius));
}

// Hash cell coordinate to a single unsigned integer
uint HashCell2D(ivec2 cell)
{
	uvec2 unsigned_cell = uvec2(cell);
	uint a = unsigned_cell.x * hashK1;
	uint b = unsigned_cell.y * hashK2;
	return (a + b);
}

uint KeyFromHash(uint hash, uint tableSize)
{
	return hash % tableSize;
}

vec2 CalculateExternalForcesID(uint id) {
    Velocities[id] -= CalculateExternalForces(Positions[id], Velocities[id]) * delta_time;

	// Predict
	const float predictionFactor = 1 / 20.0f;
    const vec2 predictedPosition = Positions[id] + Velocities[id] * predictionFactor;
	PredictedPositions[id] = predictedPosition;

    return predictedPosition;
}

void main()
{
    uvec3 id = gl_GlobalInvocationID;
	if (id.x >= num_particles)
        return;
    
	vec2 predicted_position = CalculateExternalForcesID(id.x);

    // Reset offsets
	SpatialOffsets[id.x] = num_particles;
	// Update index buffer
	uint index = id.x;
	ivec2 cell = GetCell2D(predicted_position, smoothing_radius);
	uint hash = HashCell2D(cell);
	uint key = KeyFromHash(hash, num_particles);
	SpatialIndices[id.x] = SpatialIndex(index, hash, key);
}
